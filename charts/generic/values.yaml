# Generated from builder - c4a0ee6e4e78

image:
  repository:
  tag: latest
  pullPolicy: IfNotPresent
  pullSecrets: []

#: Custom labels to add into metadata
labels: {}
  # foo: bar

podAnnotations: {}

replicas: 1

#: Create HorizontalPodAutoscaler object for deployment type
autoscaling:
  enabled: false
  minReplicas: 3
  maxReplicas: 5
  targetCPUUtilizationPercentage: 200
  targetMemoryUtilizationPercentage: 150

#: See `kubectl explain poddisruptionbudget.spec` for more
#  ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
podDisruptionBudget: {}
#  minAvailable: 1
#  maxUnavailable: 1

#: See `kubectl explain deployment.spec.strategy` for more
#  ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
deploymentStrategy:
  type: RollingUpdate

service:
  annotations: {}
  type: ClusterIP
  port: "8000"
  containerPort: "8000"
  # nodePort:


probes:

  liveness:
    enabled: false
    path: /_health
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readiness:
    enabled: false
    path: /_health
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  startup:
    enabled: false
    path: /_health
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  

ingress:
  enabled: false
  #: For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  #  See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # className: nginx
  #: Values can be templated
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"

  #: pathType is only for k8s >= 1.1=
  pathType: Prefix

  hosts:
    - host: app.local
      paths:
        - /
  tls: []
  #  - secretName: app-tls
  #    hosts:
  #      - app.local

resources: {}
  # limits:
  #   memory: 200Mi
  # requests:
  #   cpu: 100m
  #   memory: 100Mi

nodeSelector: {}

tolerations: []

affinity: {}
  # podAntiAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #   - labelSelector:
  #       matchExpressions:
  #       - key: app
  #         operator: In
  #         values:
  #         - example
  #     topologyKey: "kubernetes.io/hostname"

priorityClassName: ""

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

hostAliases: []
  # - ip: "127.0.0.1"
  #   hostnames:
  #   - "foo.local"
  #   - "bar.local"

command: []
args: []

volumes: []
volumeMounts: []

env: {}
envFrom: []
envValueFrom: {}
  # POD_IP:
  #   fieldRef:
  #     fieldPath: status.podIP

config: {}
  # environment: debug

secrets: {}
  # password: foobar

configVolume:
  enabled: false
  # mountPath: /config
  # data:
  #   config.yaml: |
  #     environment: debug

secretsVolume:
  enabled: false
  # mountPath: /config
  # data:
  #   secrets.yaml: |
  #     password: foovar

hooksConfig: true
hooksSecret: true

persistence:
  enabled: false
  mount: true
  accessMode: ReadWriteOnce
  size: 10Gi
  # storageClass:
  # path: /data
  # subPath:

sidecarContainers: {}

hooks: {}
  # example:
  #   on: post-install,pre-upgrade
  #   weight: -1

  #   image:
  #     repository:
  #     tag: latest

  #   command:

  #   env: {}
  #   envFrom: []
  #   envValueFrom: {}
  #   resources: {}

  #   affinity: {}
  #   nodeSelector: {}

workers: {}
  # example:
  #   image:
  #     repository:
  #     tag: latest

  #   command:

  #   kind: Deployment

  #   replicas: 1
  #   autoscaling:
  #     enabled: false
  #     minReplicas: 3
  #     maxReplicas: 5
  #     targetCPUUtilizationPercentage: 200
  #     targetMemoryUtilizationPercentage: 150

  #   env: {}
  #   envFrom: []
  #   envValueFrom: {}
  #   resources: {}

  #   affinity: {}
  #   nodeSelector: {}

  #   ports:
  #     http: 8000

crons: {}
  # example:
  #   image:
  #     repository:
  #     tag: latest

  #   command:

  #   schedule: 0 8 * * 3,6
  #   suspend: false

  #   env: {}
  #   envFrom: []
  #   resources: {}

  #   affinity: {}
  #   nodeSelector: {}

monitoring:
  metrics:
    enabled: false
    path: /metrics
